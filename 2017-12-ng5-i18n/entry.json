{"slug":"2017-12-ng5-i18n","html":"<p>Bis Version 4 setzte Angular auf die <a href=\"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl-API</a>.\nIn Angular 5 wurde diese Abhängigkeit verworfen – dadurch ändern sich einige Details bei der Internationalisierung und den lokalisierten Pipes.\nIn diesem Artikel haben wir die wichtigsten Änderungen zusammengefasst.</p>\n<h2 id=\"intl-api\">Intl-API</h2>\n<p>Bis Angular 4 kam zur Lokalisierung die Intl-API zum Einsatz, die in den modernen Browsern nativ implementiert ist.\nDieser Weg bringt allerdings zwei wesentliche Nachteile mit sich:</p>\n<ol>\n<li>Die API ist in den Browsern unterschiedlich implementiert.</li>\n<li>In älteren Browsern ist ein Polyfill nötig, um die Funktionalität nachzurüsten.</li>\n</ol>\n<p>In Angular 5.0.0 wurde die Abhängigkeit auf die Intl-API entfernt.\nDas betrifft besonders die Pipes, die auf Lokalisierung setzen: <code>DatePipe</code>, <code>DecimalPipe</code> und <code>CurrencyPipe</code>.</p>\n<h2 id=\"sprache-festlegen\">Sprache festlegen</h2>\n<p>Die genannten Pipes verarbeiten Informationen, die spezifisch für eine Region sind.\nBeispielsweise werden Datumsangaben im Locale <code>en_US</code> anders dargestellt als für <code>de_DE</code>.\nEin weiteres Beispiel sind Dezimal- und Tausendertrennzeichen (Punkt und Komma) bei Zahlen.</p>\n<p>In der Anwendung muss immer ein aktives Locale festgelegt werden.\nIm einfachsten Fall legen wir die Sprache schon zur Entwicklungszeit fest, aber es existieren natürlich auch dynamische und flexiblere Wege.</p>\n<p>Das aktuelle Locale ist im Token <code>LOCALE_ID</code> hinterlegt.\nUm den Wert zu ändern, können wir das Token im DI-Container überladen.\nDiesen Weg beschreiben wir so auch im Buch im Abschnitt 13.1.2 &quot;Die Sprache einstellen&quot;:</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-variable\">@NgModule</span>({\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-attribute\">providers</span>: [\n    { <span class=\"hljs-attribute\">provide</span>: LOCALE_ID, <span class=\"hljs-attribute\">useValue</span>: <span class=\"hljs-string\">&#x27;de&#x27;</span> }\n  ]\n})\n</code></pre>\n<p>Ab Angular 5 müssen die verfügbaren Locales einzeln importiert und registriert werden.\nDafür wurde die Funktion <code>registerLocaleData()</code> eingeführt, die z.B. im <code>AppModule</code> aufgerufen werden kann:</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">// app.module.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">LOCALE_ID</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { registerLocaleData } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> localeDe <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/locales/de&#x27;</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>({\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-attr\">providers</span>: [\n    { <span class=\"hljs-attr\">provide</span>: <span class=\"hljs-variable constant_\">LOCALE_ID</span>, <span class=\"hljs-attr\">useValue</span>: <span class=\"hljs-string\">&#x27;de&#x27;</span> }\n  ]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">registerLocaleData</span>(localeDe);\n  }\n}\n</code></pre>\n<h2 id=\"änderungen-bei-den-pipes\">Änderungen bei den Pipes</h2>\n<h3 id=\"datepipe\">DatePipe</h3>\n<p>Im Zuge dieser Änderungen hat sich auch das Verhalten der lokalisierten Pipes geändert.\nDie Tabellen mit den Platzhaltern für das Format der <code>DatePipe</code> (Seite 263 f. im Angular-Buch) sind damit nicht mehr komplett zutreffend, denn einige Platzhalter haben sich verändert.\nBesonders die vordefinierten Aliase (z.B. <code>medium</code>) haben eine geänderte Signatur und es sind einige neue Patterns hinzugekommen.</p>\n<p>In den meisten Fällen sind hier nur wenige Änderungen nötig.\nÜberprüfen Sie aber unbedingt alle Datumsangaben in Ihren Anwendungen.\nAlle aktuellen Platzhalter finden Sie in der <a href=\"https://angular.io/api/common/DatePipe\">Dokumentation für die DatePipe</a>.</p>\n<h3 id=\"currencypipe\">CurrencyPipe</h3>\n<p>Die <a href=\"https://angular.io/api/common/CurrencyPipe\">CurrencyPipe</a> hat ab Angular 5 eine geänderte Signatur:</p>\n<pre><code>expression | currency[<span class=\"hljs-symbol\">:currencyCode</span>[<span class=\"hljs-symbol\">:display</span>[<span class=\"hljs-symbol\">:digitInfo</span>[<span class=\"hljs-symbol\">:locale</span>]]]]\n</code></pre>\n<p>Damit fällt das alte Argument <code>symbolDisplay</code> weg und macht Platz für das neue <code>display</code>:</p>\n<pre><code><span class=\"hljs-attr\">display</span> = { <span class=\"hljs-string\">&#x27;code&#x27;</span> | <span class=\"hljs-string\">&#x27;symbol&#x27;</span> | <span class=\"hljs-string\">&#x27;symbol-narrow&#x27;</span> }\n</code></pre>\n<p><code>display</code> entscheidet, ob das Währungskürzel als Text (z.B. <em>EUR</em>), Symbol (z.B. <em>€</em>) oder gekürztes Symbol (relevant bei zusammengesetzten Währungen wie <em>AU$</em>, wird angezeigt als <em>$</em>) angezeigt werden soll.</p>\n<p>Außerdem kann über das Argument <code>locale</code> ein spezifisches Locale angegeben werden, nach dem die Währungsangabe geparst wird.</p>\n<p>Diese Beispiele veranschaulichen das neue Verhalten:</p>\n<pre><code><span class=\"hljs-attribute\">3</span>.<span class=\"hljs-number\">141</span> | currency:&#x27;EUR&#x27;                          // <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">14</span> €\n<span class=\"hljs-attribute\">3</span>.<span class=\"hljs-number\">141</span> | currency:&#x27;USD&#x27;:&#x27;code&#x27;                   // <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">14</span> USD\n<span class=\"hljs-attribute\">3</span>.<span class=\"hljs-number\">141</span> | currency:&#x27;EUR&#x27;:&#x27;code&#x27;:&#x27;<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span>&#x27;           // <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">14</span> EUR\n<span class=\"hljs-attribute\">3</span>.<span class=\"hljs-number\">141</span> | currency:&#x27;USD&#x27;:&#x27;symbol&#x27;:&#x27;<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span>&#x27;:&#x27;en_US&#x27; // $<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">14</span>\n</code></pre>\n<h2 id=\"i18n-kommentare\">i18n-Kommentare</h2>\n<p>Eine kleine Änderung gibt es in Sachen Mehrsprachigkeit.\nUm Textknoten zur Übersetzung zu markieren, wird das <code>i18n</code>-Attribut eingesetzt.\nDiese Syntax beschreiben wir im Angular-Buch auf Seite 352:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">&quot;meaning|description&quot;</span>&gt;</span>Hallo Welt!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</code></pre>\n<p>Für Text ohne abgegrenztes DOM-Element konnten wir bis Angular 4 auch HTML-Kommentare verwenden.\n<strong>Diese Magic Comments werden ab Angular 5 nicht mehr unterstützt!</strong></p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!--i18n: meaning|description --&gt;</span>\nMeine Nachricht\n<span class=\"hljs-comment\">&lt;!--/i18n--&gt;</span>\n</code></pre>\n<p>Stattdessen müssen wir in diesem Fall nun den <code>&lt;ng-container&gt;</code> als umgebendes Element einsetzen.\nAuf dem Container können wir dann wie gewohnt das <code>i18n</code>-Attribut verwenden:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ng-container</span> <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">&quot;meaning/description&quot;</span>&gt;</span>\nMeine Nachricht\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ng-container</span>&gt;</span>\n</code></pre>\n<p>Der <code>&lt;ng-container&gt;</code> ist ein Hilfselement für Angular und ist im Browser später nicht mehr sichtbar.</p>\n<p>Mit dieser Änderung ist die Markierung von Texten nun konsistent: Es wird in jedem Fall das <code>i18n</code>-Attribut eingesetzt.</p>\n<h3 id=\"i18n-attribute-mit-css-markieren\">i18n-Attribute mit CSS markieren</h3>\n<p>Um bei der Arbeit mit i18n nicht den Überblick zu verlieren, konnten wir Elemente mit dem <code>i18n</code>-Attribut per CSS markieren.\nDiesen Tipp geben wir auch im Angular-Buch auf Seite 359:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-attr\">[i18n]</span>,\n<span class=\"hljs-selector-attr\">[i18n-placeholder]</span>,\n<span class=\"hljs-selector-attr\">[i18n-title]</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid green <span class=\"hljs-meta\">!important</span>;\n}\n</code></pre>\n<p>Leider funktioniert dieses Hilfsmittel seit Angular 4.3 nicht mehr, da alle <code>i18n</code>-Attribute automatisch aus dem Kompilat entfernt werden (siehe <a href=\"https://github.com/angular/angular/issues/11042\">#11042</a>). Dies geschieht leider immer, egal ob die Anwendung übersetzt wird, oder nicht. Vielleicht kommen die Attribute aber irgendwann wieder zurück. Das Problem wurde immerhin als Feature-Request klassifiziert (siehe <a href=\"https://github.com/angular/angular/issues/20055\">#20055</a>).</p>\n","meta":{"title":"Angular 5: Änderungen für i18n","author":"Ferdinand Malcher","mail":"mail@fmalcher.de","published":"2017-12-07T00:00:00.000Z","keywords":["Angular","Angular 5","i18n","Internationalisierung","Pipes","Locale"],"language":"de","header":{"url":"angular5.png","width":2600,"height":555}}}
