{"slug":"2017-12-book-monkey-upgrade","html":"<p>Dank der Angular CLI ist es ziemlich einfach, eine neue Anwendung mit der aktuellen Version von Angular zu erstellen.\nDoch was ist zu tun, wenn wir ein bestehendes Projekt auf den neuesten Stand bringen wollen?</p>\n<p>Im konkreten Fall werden wir in diesem Artikel das Beispielprojekt <a href=\"https://book-monkey2.angular-buch.com/\">&quot;BookMonkey 2&quot;</a> aktualisieren.\nIch gehe davon aus, dass Sie den Anleitungen aus dem Buch gefolgt sind\nund Sie nun den BookMonkey mit Angular 4.x und einer Version der Angular CLI unter 1.5 vorliegen haben.\nSelbstverständlich werden die meisten Schritte auch für jede andere Angular-Anwendung anwendbar sein. </p>\n<h2 id=\"1-globale-installationen-aktualisieren\">1. Globale Installationen aktualisieren</h2>\n<p>Falls nicht bereits geschehen, so sollten Sie unbedingt auf NPM 5.x aktualisieren.\nNPM 5 ist ab Node.js 8 mit an Board. Das Angular-Buch geht noch von NPM 4 aus.\nDie wichtigste Neuerung sind die automatisch erzeugten Lock-Dateien (<code>package-lock.json</code>).\nOhne großes Zutun hat damit der recht unglückliche Umgang mit Versionsnummern ein Ende.\nErscheint bei Eingabe von <code>npm -v</code> eine Versionsnummer <code>5.x</code>, so ist alles perfekt.  </p>\n<p>Die globale Installation der Angular CLI aktualisieren wir wie folgt:</p>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-selector-tag\">i</span> -<span class=\"hljs-selector-tag\">g</span> <span class=\"hljs-keyword\">@angular</span>/cli\nng -v\n</code></pre>\n<h2 id=\"2-generierten-dateien-aktualisieren\">2. Generierten Dateien aktualisieren</h2>\n<p>Beim Update auf Angular 5 hilft der <a href=\"https://angular-update-guide.firebaseapp.com/\">Angular Update Guide</a>.\nDas Tool stellt eine Checkliste und die passenden Befehle für das Update per <code>npm install</code> bereit.\nDas ist formal korrekt, die Angular-Pakete sind nach Anwendung des <em>Angular Update Guide</em> auf dem aktuellen Stand.\nDies gilt jedoch nicht für die vielen Dateien, welche die Angular CLI mit dem Befehl <code>ng new</code> anlegt.\nHier tut sich ständig etwas – viele kleine Verbesserungen sind seit Frühjahr 2017 geschehen.\nLeider gibt es hier kein automatisches Tooling.\nEs führt kein Weg daran vorbei:\nWir müssen eine Reihe von Dateien vergleichen und ersetzen, um das gesamte Projekt aufzufrischen.</p>\n<p>Zunächst löschen wir die Datei <code>package-lock.json</code> aus dem BookMonkey-Verzeichnis – sofern diese vorhanden ist.\nWenn dieser Schritt vergessen wird, dann werden die manuellen Änderungen an der <code>package.json</code> nicht berücksichtigt.</p>\n<p>Wir erzeugen nun ein zweites leeres Projekt, mit den selben Argumenten wie im Buch:</p>\n<pre><code class=\"language-bash\">ng <span class=\"hljs-keyword\">new</span> BookMonkey -p bm -<span class=\"hljs-keyword\">is</span> <span class=\"hljs-comment\">--skip-install</span>\n</code></pre>\n<p>Neu ist das Argument <code>--skip-install</code>.\nWir benötigen keine fertige Installation mit einem vollen Ordner <code>node_modules</code>\nund auch nicht die Datei <code>package-lock.json</code>!\nNun kopieren wir die frischen Blueprint-Dateien vom neuen Projekt in das alte hinüber.\nIm Falle des BookMonkeys sind dies folgende Dateien:</p>\n<ul>\n<li><code>.angular-cli.json</code> – <strong>Vorsicht!</strong></li>\n<li><code>.gitignore</code></li>\n<li><code>karma.conf.js</code></li>\n<li><code>package.json</code> – <strong>Vorsicht!</strong></li>\n<li><code>protractor.conf.js</code></li>\n<li><code>src/main.ts</code></li>\n<li><code>src/polyfills.ts</code></li>\n<li><code>src/test.ts</code></li>\n<li><code>src/tsconfig.app.json</code></li>\n<li><code>src/tsconfig.spec.json</code></li>\n<li><code>tsconfig.json</code></li>\n<li><code>tslint.json</code></li>\n</ul>\n<p>Vorsichtig müssen wir bei den Dateien <code>.angular-cli.json</code> und <code>package.json</code> sein.\nHier sollten wir nicht die Dateien komplett überschreiben,\ndenn wir haben während der Entwicklung des BookMonkey einige Zeilen hinzugefügt.\nFür die Einbindung des CSS-Frameworks haben wir in der Datei <code>.angular-cli.json</code>\ndiese Zeile im <code>styles</code>-Array hinzugefügt:</p>\n<pre><code><span class=\"hljs-string\">&quot;../node_modules/semantic-ui-css/semantic.css&quot;</span>\n</code></pre>\n<p>Bei der Datei <code>package.json</code> haben wir ein paar Einträge zu den <code>scripts</code> hinzugefügt\nund die Abhängigkeiten <code>angular-date-value-accessor</code> sowie <code>semantic-ui-css</code> eingeführt\n(<code>npm i angular-date-value-accessor</code> sowie <code>npm i semantic-ui-css</code>).\nAm leichtesten übernimmt man die neuen Zeilen mit einem Diff-Tool.\nDer Rest der genannten Dateien kann getrost überschrieben werden.\nUnser Diff mit einem Projekt der Angular CLI 1.0.0 sieht so aus:</p>\n<ul>\n<li><strong><a href=\"https://github.com/book-monkey2-build/iteration-7-i18n/commit/3c607f0bef8b6577029cf15dcec8fe9c6ff05874\">Update CLI project to 1.5.4</a></strong></li>\n</ul>\n<p>Wenn Sie bereits einen neueren Stand der CLI haben, so sind bei Ihnen weniger Änderungen notwendig.</p>\n<p>Zur Kontrolle können wir noch einmal die Datei <code>package.json</code> überprüfen.\nUnsere Datei sollte nun der Version vom Angular-CLI Schematic ähneln: <a href=\"https://github.com/angular/devkit/blob/master/packages/schematics/angular/application/files/package.json\">@angular-devkit/schematics\t-- package.json</a></p>\n<h2 id=\"3-i18n-kommentare-ersetzen\">3. i18n-Kommentare ersetzen</h2>\n<p>Zum Abschluss der Reise mit dem BookMonkey hatten wir die Anwendung internationalisiert.\nIn zwei Dateien haben wir einen Text übersetzt, der nicht direkt von einem HTML-Element umschlossen wird.\nWir haben hierfür HTML-Kommentare verwendet.\nDiese magischen Kommentare sind jetzt <em>deprecated</em> und sollten durch den <code>ng-container</code> ersetzt werden (siehe <a href=\"https://github.com/angular/angular/pull/18998\">#18998</a>).</p>\n<p>Aus</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!--i18n: @@BookDetailsComponent:book delete --&gt;</span>Buch löschen<span class=\"hljs-comment\">&lt;!--/i18n--&gt;</span>\n</code></pre>\n<p>wird</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ng-container</span> <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">&quot;@@BookDetailsComponent:book delete&quot;</span>&gt;</span>Buch löschen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ng-container</span>&gt;</span>\n</code></pre>\n<p>Die Änderungen sind schnell gemacht, sie sind in folgendem Diff zusammengefasst:</p>\n<ul>\n<li><strong><a href=\"https://github.com/book-monkey2-build/iteration-7-i18n/commit/6e54598b2e05aff8e804e2bce7e47577a7c3b216\">Use ng-container over i18n comments</a></strong></li>\n</ul>\n<h2 id=\"4-den-neuen-httpclient-verwenden\">4. Den neuen HttpClient verwenden</h2>\n<p>Mit Version 4.3 des Angular-Frameworks steht der neue <code>HttpClient</code> bereit.\nDieser ersetzt den veralteten <code>Http</code>-Service (siehe <a href=\"https://github.com/angular/angular/pull/18906\">#18906</a>).\nDem neuen <code>HttpClient</code> widmen wir uns in einem <a href=\"/blog/2017-11-httpclient\">ausführlichen Blogpost</a>.\nHier sind in aller Kürze die notwendigen Änderungen:</p>\n<ul>\n<li><strong><a href=\"https://github.com/book-monkey2-build/iteration-7-i18n/commit/efd88396773ba0c5b52494e0f1aef958f7cc3c3e\">Update to new HttpClient</a></strong></li>\n</ul>\n<h2 id=\"5-rxjs-pipeable-operators-verwenden\">5. RxJS Pipeable Operators verwenden</h2>\n<p>Mit Angular 5 kommt das Konzept der Pipeable Operators in die Angular-Welt (auch bekannt unter dem alten Namen <em>Lettable Operators</em>).\nÜber die neuen Operatoren haben wir im <a href=\"/blog/2017-12-angular5#rxjs-pipeable-operators\">Blogpost zu Angular 5</a> berichtet.</p>\n<ul>\n<li><strong><a href=\"https://github.com/book-monkey2-build/iteration-7-i18n/commit/043a3d0bb509aea3b6d714fdda75f55d7283c842\">Introduce lettable RxJS operators</a></strong></li>\n</ul>\n<h2 id=\"6-lokalisierungs-daten-importieren-und-registrieren\">6. Lokalisierungs-Daten importieren und registrieren</h2>\n<p>Ab Angular 5 müssen die verfügbaren Locales einzeln importiert und registriert werden.\nDafür wurde die Funktion <code>registerLocaleData()</code> eingeführt, die z.B. im <code>AppModule</code> aufgerufen werden kann:</p>\n<ul>\n<li><strong><a href=\"https://github.com/book-monkey2-build/iteration-7-i18n/commit/0e924f6ab5e540db4ce4c98f2b95c44f42a5b775\">Use registerLocaleData()</a></strong></li>\n</ul>\n<p>Es gibt noch weitere Änderungen, welche die Mehrsprachigkeit betreffen –\nwobei aber in unserem Fall keine Änderungen im BookMonkey notwendig sind.\nDer Blogpost <a href=\"/blog/2017-12-ng5-i18n\">Angular 5: Änderungen für i18n</a> stellt diese im Einzelnen vor.</p>\n<h2 id=\"7-neu-das-interface-bookraw\">7. Neu: Das Interface <code>BookRaw</code></h2>\n<p>Ein optionales, aber sehr hilfreiches Feature sind die generischen Methoden des neuen <code>HttpClient</code>.\nIm Buch haben wir noch den alten Service und damit die untypisierte Syntax verwendet:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">this</span>.http.<span class=\"hljs-keyword\">get</span>(`${<span class=\"hljs-keyword\">this</span>.api}/books`)\n</code></pre>\n<p>Der zurück gegebene Wert ist vom Typ <code>Observable&lt;Object&gt;</code>.\nTypeScript kann uns so beim Kompilieren und bei der automatischen Code-Vervollständigung kaum unterstützen.\nDie neue API hat nun für jede der bekannten HTTP-Methoden eine generische Variante dabei:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">this</span>.http.<span class=\"hljs-keyword\">get</span>&lt;T&gt;(`${<span class=\"hljs-keyword\">this</span>.api}/books`)\n</code></pre>\n<p>Der zurückgegebene Wert ist nun vom Typ <code>Observable&lt;T&gt;</code>.\nStatt <code>T</code> müssen wir natürlich einen existierenden Typ angeben.\nIn unserem Fall wollen wir ein Interface verwenden:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// book-raw.ts</span>\nexport interface <span class=\"hljs-title class_\">BookRaw</span> <span class=\"hljs-punctuation\">{</span>\n<span class=\"hljs-symbol\">  isbn:</span> <span class=\"hljs-attr\">string</span><span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">  title:</span> <span class=\"hljs-attr\">string</span><span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">  authors:</span> string[]<span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">  published:</span> <span class=\"hljs-attr\">string</span><span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">  subtitle:</span> <span class=\"hljs-attr\">string</span><span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">  rating:</span> <span class=\"hljs-attr\">number</span><span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">  thumbnails:</span> <span class=\"hljs-punctuation\">{</span>\n<span class=\"hljs-symbol\">    url:</span> <span class=\"hljs-attr\">string</span><span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">    title:</span> <span class=\"hljs-attr\">string</span><span class=\"hljs-punctuation\">;</span>\n  <span class=\"hljs-punctuation\">}</span>[]<span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-symbol\">  description:</span> <span class=\"hljs-attr\">string</span><span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Wir helfen damit dem Compiler auf die Sprünge.\nBei allen nachfolgenden Operatoren in der RxJS-Pipeline können wir nun auf automatische Code-Vervollständigung setzen. \nWir ersparen uns aber vor allem auch eine potentielle Quelle für Laufzeitfehler – welche stets schwer zu finden sind.\nDas ganze funktioniert natürlich nur, wenn wiederum keine Tippfehler im Interface vorhanden sind – TypeScript muss uns hier weiterhin &quot;blind&quot; vertrauen.</p>\n<p>Auch diese optionalen Änderungen finden Sie in auf GitHub:</p>\n<ul>\n<li><strong><a href=\"https://github.com/book-monkey2-build/iteration-7-i18n/commit/f2d380af5171f079d37036370d03d6538e2f18f8\">Introduce interface BookRaw for HTTP response</a></strong></li>\n</ul>\n<h2 id=\"8-geschafft\">8. Geschafft!</h2>\n<p>Herzlichen Glückwunsch!\nDer BookMonkey ist auf dem neuesten Stand und wurde auch gleich noch ein wenig modernisiert.\nDas gesamte finale Projekt können Sie hier herunterladen:</p>\n<ul>\n<li><a href=\"https://github.com/book-monkey2-build/iteration-7-i18n/archive/master.zip\">Der finale BookMonkey 2 (ZIP)</a></li>\n</ul>\n<p><strong>Ich wünsche Ihnen weiterhin viel Spaß mit Angular 5 und unserem Buch.</strong></p>\n","meta":{"title":"Angular 5: Den BookMonkey upgraden","author":"Johannes Hoppe","mail":"johannes.hoppe@haushoppe-its.de","published":"2017-12-06T00:00:00.000Z","keywords":["Angular","Angular 5","Angular CLI"],"language":"de","thumbnail":"https://website-articles.angular-buch.com/2017-12-book-monkey-upgrade/../x_shared/angular5.png"}}
