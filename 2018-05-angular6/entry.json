{"slug":"2018-05-angular6","html":"<p>Angular 6 ist da! Am 04. Mai 2018 erschien die neue Major-Version von Angular.\nObwohl das zunächst nach komplizierten Upgrades und vielen Breaking Changes klingt, können Sie aufatmen:\nIhre aktuellen Projekte mit Angular 4 oder 5 sind weiterhin lauffähig und das Upgrade ist in kurzer Zeit erledigt.</p>\n<p>In diesem Artikel stellen wir Ihnen kurz die Neuerungen vor und aktualisieren das Beispielprojekt &quot;Book Monkey&quot;.</p>\n<blockquote>\n<p><strong>Die Update-Infos für neuere Versionen von Angular finden Sie in separaten Blogartikeln. Wenn Sie das Update durchführen möchten, lesen Sie bitte alle Artikel in der gegebenen Reihenfolge.</strong></p>\n<ul>\n<li><a href=\"/blog/2018-10-angular7\">Angular 7 ist da!</a></li>\n<li><a href=\"/blog/2019-06-angular8\">Angular 8 ist da!</a></li>\n<li><a href=\"/blog/2020-02-angular9\">Angular 9 ist da!</a></li>\n<li><a href=\"/blog/2020-06-angular10\">Angular 10 ist da!</a></li>\n<li><a href=\"/blog/2020-11-angular11\">Angular 11 ist da!</a></li>\n<li><a href=\"/blog/2021-06-angular12\">Angular 12 ist da!</a></li>\n<li><a href=\"/blog/2021-11-angular13\">Angular 13 ist da!</a></li>\n<li><a href=\"/blog/2022-06-angular14\">Angular 14 ist da!</a></li>\n<li><a href=\"/blog/2022-11-angular15\">Angular 15 ist da!</a></li>\n<li><a href=\"/blog/2023-05-angular16\">Angular 16 ist da!</a></li>\n</ul>\n</blockquote>\n<h2 id=\"angular-6-alles-ist-neu\">Angular 6: Alles ist neu?</h2>\n<p>Die Neuerungen in Angular 6 betreffen vor allem Themen aus dem Hintergrund des Frameworks.\nAn der öffentlichen API von Angular hat sich so gut wie nichts geändert. Das Upgrade auf Angular 6 ist also ein Kinderspiel.</p>\n<p>Die offizielle Ankündigung zum Angular-6-Release finden Sie im\n<a href=\"https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4\">Angular-Blog</a>.\nFür Details zu einzelnen Änderungen lohnt sich außerdem ein Blick in den\n<a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">Changelog von Angular</a>.</p>\n<p>Beim Update auf Angular 6 hilft der <a href=\"https://update.angular.io/#5.0:6.0\">Angular Update Guide</a>.\nDas Tool stellt eine Checkliste und die passenden Befehle für das Update bereit.</p>\n<p>Angular bietet ab sofort folgenden <strong>Long Term Support (LTS)</strong>:</p>\n<ul>\n<li><strong>Angular 4</strong> – 23. September 2018</li>\n<li><strong>Angular 5</strong> – 1. Mai 2019</li>\n<li><strong>Angular 6</strong> – 3. November 2019</li>\n</ul>\n<p>Damit ist gewährleistet, dass aktuelle Angular-Projekte auch langfristig lauffähig sind und nicht mit jeder Major-Version zeitnah ein vollständiges Upgrade durchgeführt werden muss.</p>\n<p>Angular 6 ist übrigens die erste Version von Angular, mit der alle Module die selbe Versionsnummer 6 besitzen.</p>\n<h3 id=\"tree-shakable-providers\">Tree-Shakable Providers</h3>\n<p>Für jeden Service, den wir in der Anwendung nutzen wollten, mussten wir bisher folgende Schritte gehen:</p>\n<ul>\n<li>Serviceklasse mit Decorator <code>@Injectable()</code> versehen</li>\n<li>Service in einem Modul registrieren (unter <code>providers</code> in einem <code>NgModule</code> eintragen)</li>\n<li>Instanz über Constructor Injection anfordern, z.B. in einer Komponente</li>\n</ul>\n<p>Dieser Weg funktionierte gut, hatte aber einen entscheidenden Nachteil:\nDer Service ist immer in einem Modul referenziert, auch wenn er niemals verwendet wird.\nDamit wird der Service <em>immer</em> auch in das Bundle unserer Anwendung eingebaut.</p>\n<p>Mit Angular 6 kommt das Konzept der <em>Tree-Shakable Providers</em> ins Spiel.\nAnstatt den Service explizit im Modul zu deklarieren, registriert sich der Service ab sofort eigenständig in einem Modul.\nDazu ist der Schlüssel <code>providedIn</code> im <code>@Injectable()</code>-Decorator zuständig:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-variable\">@Injectable</span>({ providedIn: <span class=\"hljs-string\">&#x27;root&#x27;</span> })\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookStoreService</span> </span>{}\n</code></pre>\n<p>In 99 % der Fälle wird hier der Wert <code>root</code> verwendet.\nDieser Service wird nur dann in das Application-Bundle übernommen, wenn er auch von einer Komponente angefordert wird.</p>\n<p>Für einen tieferen Einblick in Tree-Shakable Providers sei der passende <a href=\"https://www.softwarearchitekt.at/post/2018/05/06/the-new-treeshakable-providers-api-in-angular-why-how-and-cycles.aspx\">Blogartikel von Manfred Steyer</a> empfohlen.</p>\n<h3 id=\"angular-cli-6\">Angular CLI 6</h3>\n<p>Die Angular CLI wurde mit ihrer neuen Version grundlegend überarbeitet.\nGrundlage der Code-Generierung sind die sogenannten <strong>Schematics</strong>. Dabei handelt es sich um &quot;Baupläne&quot; zur Code-Generierung und -Aktualisierung.\nJeder Aufruf von <code>ng generate</code> triggert die darunterliegenden Schematics.\nDas System ist so strukturiert, dass auch eigene Schematics zur Codeerzeugung eingebunden werden können.\nViele Drittanbieter-Bibliotheken integrieren bereits entsprechende Bauanleitungen in ihre Projekte.</p>\n<p>Für einen Deep-Dive in die Welt der Schematics können wir das <a href=\"https://leanpub.com/angular-schematics\">kostenlose E-Book von Manfred Steyer</a> empfehlen.</p>\n<h4 id=\"workspaces-und-angularjson\">Workspaces und <code>angular.json</code></h4>\n<p>Die Angular CLI setzt ab sofort auf das Konzept der <em>Workspaces</em>. Ein mit <code>ng new</code> generiertes Projekt ist nun nicht mehr nur eine einzige Anwendung, sondern ein Arbeitsbereich, in dem mehrere Anwendungen und Bibiotheken zusammen entwickelt werden.\nDurch das <a href=\"https://github.com/angular/angular-cli/wiki/stories-create-library\">neue Library-Feature</a> kann wiederverwendbarer Code in gemeinsam genutzte Bibliotheken ausgelagert werden.</p>\n<p>Verschiedene Anwendungen innerhalb eines Workspaces können sein z.B.</p>\n<ul>\n<li>nach Kundenwunsch angepasste Versionen einer Anwendung (siehe auch unser Blogartikel <a href=\"https://angular.schule/blog/2018-05-one-app-per-customer\">&quot;One App per Customer&quot;</a>)</li>\n<li>die Browser-, Desktop- und Mobilversion einer Anwendung</li>\n</ul>\n<p>Um diese neue Projektstruktur abzubilden, wurde eine neue Konfigurationsdatei geschaffen.\n<strong>Die neue <code>angular.json</code> löst die bisherige <code>.angular-cli.json</code> ab!</strong>\nDie Struktur innerhalb der Datei hat sich stark geändert, viele der Optionen sind aber trotzdem wiederzufinden und funktionieren genauso wie vorher.\nDie wichtigsten Punkte, die wir auch im Buch verwenden, haben wir hier gesammelt:</p>\n<ul>\n<li>Das <code>styles</code>-Array zum Einbinden zusätzlicher externer Stylesheets (Kapitel 5, Seite 60) ist jetzt zu finden unter <code>projects &gt; book-monkey &gt; architect &gt; build &gt; options &gt; styles</code>.</li>\n<li>Für die standardmäßige Style-Extension und für generelle Inline-Styles (Kapitel 5, Seite 60) gibt es keine einfach zu findende Option mehr in der <code>angular.json</code>. Wenn wir die entsprechenden Optionen schon beim Erstellen des Projekts angeben, werden sie aber in die <code>angular.json</code> übernommen: <code>ng new my-project --style=scss --inline-style</code></li>\n<li>Die Environments (Kapitel 18, Seite 409) heißen jetzt <code>configurations</code>. Die Environment-Files liegen weiterhin im Ordner <code>src/environments</code>. Zusätzlich befinden sich aber in der <code>angular.json</code> zusätzliche Einstellungsmöglichkeiten, die wir bisher mit einzelnen Kommandozeilenparametern steuern mussten. Um eine Konfiguration beim Build zu verwenden, ist der folgende Befehl nötig: <code>ng build --configuration=production</code>. Die Kurzform <code>ng build --prod</code> existiert weiterhin, muss aber jetzt immer mit zwei Minuszeichen angeführt werden (nicht <code>-prod</code>).</li>\n</ul>\n<p>Sollten Ihnen noch weitere Unterschiede zum Buch auffallen, sind wir über einen Hinweis dankbar – wir nehmen gern weitere Punkte in die Liste auf.</p>\n<h4 id=\"ng-update\"><code>ng update</code></h4>\n<p>Der neue Befehl <code>ng update</code> bringt ein Feature in die CLI, das wir uns schon lange gewünscht haben:\nein automatisches Update der Anwendung.\nAuch diese Toolchain basiert auf Schematics: Darin sind Vorschriften verpackt, wie ein Projekt und seine Abhängigkeiten auf die nächsthöhere Version aktualisiert werden müssen.\nDas Update von Angular 5 auf 6 funktioniert also vollautomatisch.\nWeiter unten in diesem Artikel gehen wir noch auf den konkreten Ablauf anhand des Book Monkey ein.</p>\n<h4 id=\"ng-add\"><code>ng add</code></h4>\n<p>Neu ist auch der Befehl <code>ng add</code>, mit dem neue Funktionalitäten zur bestehenden Anwendung hinzugefügt werden können.\nDabei handelt es sich nicht um einzelne Artefakte wie Komponenten, sondern grundlegende globale Funktionalitäten.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Angular Material</span>\nng <span class=\"hljs-keyword\">add</span><span class=\"language-bash\"> @angular/material</span>\n\n<span class=\"hljs-comment\"># Toolkit für Progressive Web App</span>\nng <span class=\"hljs-keyword\">add</span><span class=\"language-bash\"> @angular/pwa</span>\n\n<span class=\"hljs-comment\"># Kendo UI for Angular (Beispiel)</span>\nng <span class=\"hljs-keyword\">add</span><span class=\"language-bash\"> @progress/kendo-angular-inputs</span>\n</code></pre>\n<p>mit <code>ng add</code> wird nicht nur das passende NPM-Paket installiert, sondern es werden Schematics ausgeführt, die den Projektcode anpassen und die neue Funktionalität direkt in das Projekt integrieren.</p>\n<h3 id=\"rxjs-6\">RxJS 6</h3>\n<p>Die Reactive Extensions for JavaScript (RxJS) bilden die Grundlage für reaktive Programmierung mit Angular.\nRxJS erschien fast zeitgleich mit Angular ebenfalls in der neuen Version 6.\nDamit können die alten Operatoren mit Dot-Chaining nicht mehr verwendet werden, sondern es werden durchgehend Pipeable Operators eingesetzt.\nDieses Thema ist allerdings nicht neu, sondern wir haben bereits mit dem Upgrade auf Angular 5 empfohlen, auf Pipeable Operators umzusteigen.\nSiehe dazu auch der <a href=\"/blog/2017-12-angular5#rxjs-pipeable-operators-ehemals-lettable-\">Artikel zum Upgrade auf Angular 5</a>.</p>\n<p>RxJS-Operatoren werden ab jetzt nur noch wie folgt verwendet:</p>\n<pre><code class=\"language-ts\">myObservable$.pipe(\n  <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e.id),\n  <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> id.<span class=\"hljs-built_in\">length</span> &gt; <span class=\"hljs-number\">5</span>),\n  mergeMap(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> this.bs.getSingle(id))\n)\n</code></pre>\n<p>Um Abwärtskompatibilität zu wahren, wird zusätzlich das Paket <a href=\"https://www.npmjs.com/package/rxjs-compat\"><code>rxjs-compat</code></a> bereitgestellt.\nNachdem alle Abhängigkeiten auf RxJS 6 aktualisiert wurden, sollten Sie dieses Paket entfernen. Das spart Platz.</p>\n<h3 id=\"angular-elements\">Angular Elements</h3>\n<p>In Version 6 ist auch das erste Release der Angular Elements enthalten.\nDieses Modul ermöglicht es uns, Angular-Komponenten als Webkomponenten zu verpacken und zu nutzen.\nDamit können wir Angular-Komponenten auch außerhalb von Angular in jeder Anwendung einsetzen.</p>\n<p>Für einen Einstieg in das Thema verweisen wir auf die <a href=\"https://angular.io/guide/elements\">Dokumentation von Angular</a>.</p>\n<h2 id=\"book-monkey-updaten\">Book Monkey updaten</h2>\n<p>Jetzt geht es ans Eingemachte: Mit dem Wissen über die neuen Features von Angular wollen wir den Book Monkey aktualisieren.\nMit dem neuen Befehl <code>ng update</code> wird das Update sehr einfach.\nWir empfehlen Ihnen immer den Einstieg über den offiziellen <a href=\"https://update.angular.io/\">Angular Update Guide</a>.</p>\n<p>Los geht es im Ordner <code>book-monkey</code>:</p>\n<pre><code><span class=\"hljs-built_in\">cd</span> book-monkey\n</code></pre>\n<p>Bitte überprüfen Sie zur Sicherheit doppelt, am besten mit <code>dir</code> (Windows) oder <code>ls</code> (Linux/Mac), dass Sie im richtigen Verzeichnis sind.</p>\n<h3 id=\"vorab-npm-frühjahrsputz\">Vorab: NPM Frühjahrsputz</h3>\n<p>Als Grundlage für diese Anleitung haben wir den <a href=\"/blog/2017-12-book-monkey-upgrade\">aktualisierten Book Monkey vom Dezember 2017</a> verwendet.\nDas heißt, wir sind schon auf Anguar 5 und nutzen die neue <code>package-lock.json</code>, welche mit NPM 5 hinzu gekommen ist.</p>\n<p>Wir haben drei Fehler ausgemacht, die beide mit der NPM-Installation zusammen hängen.\nSollte es zu einem Fehler kommen, so scrollen Sie bitte nach ganz unten.\nWollen Sie den Fehler gleich vermeiden, so löschen Sie beherzt die Datei <code>package-lock.json</code>.</p>\n<h3 id=\"abhängigkeiten-aktualisieren-mit-ng-update\">Abhängigkeiten aktualisieren mit <code>ng update</code></h3>\n<p>Für das Update unserer Anwendung sind folgende Befehle nötig:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Angular CLI global aktualisieren</span>\n<span class=\"hljs-built_in\">npm</span> install -g @angular/cli\n\n<span class=\"hljs-comment\"># Angular CLi lokal im Projekt aktualisieren</span>\n<span class=\"hljs-built_in\">npm</span> install @angular/cli\n\n<span class=\"hljs-comment\"># Eigentlich nicht noch einmal notwendig,</span>\n<span class=\"hljs-comment\"># aber siehe Troubleshooter 2 &amp; 3</span>\n<span class=\"hljs-built_in\">npm</span> install @angular/cli\n\n<span class=\"hljs-comment\"># Zur Kontrolle, die lokale Version muss 1.7.4 sein</span>\n<span class=\"hljs-comment\"># Diese Warnung ist OK: Your global Angular CLI version (6.x.x) is greater than your local version (1.7.4).</span>\n<span class=\"hljs-comment\"># Diese Warnung nicht OK: Your global Angular CLI version (6.x.x) is greater than your local version (1.5.4).</span>\nng -v\n\n<span class=\"hljs-comment\"># Update!</span>\nng update @angular/cli\n</code></pre>\n<p>Je nach der vorherigen Projekt-Version erscheint folgende Meldung:</p>\n<blockquote>\n<p>The Angular CLI configuration format has been changed, and your existing configuration can be updated automatically by running the following command:\n<code>ng update @angular/cli</code></p>\n</blockquote>\n<p>Der Hinweis ist eindeutig. Also noch einmal:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">ng</span> update <span class=\"hljs-variable\">@angular</span>/cli\n</code></pre>\n<p>Und zum Schluss fehlt nur noch ein:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">ng</span> update <span class=\"hljs-variable\">@angular</span>/core\n</code></pre>\n<h3 id=\"rxjs-6-1\">RxJS 6</h3>\n<p>Die Aktualisierung von RxJS hat ein eigenes Tool:</p>\n<pre><code class=\"language-bash\">npm install -<span class=\"hljs-selector-tag\">g</span> rxjs-tslint\nrxjs-<span class=\"hljs-number\">5</span>-<span class=\"hljs-selector-tag\">to</span>-<span class=\"hljs-number\">6</span>-migrate -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-attribute\">src</span>/tsconfig<span class=\"hljs-selector-class\">.app</span><span class=\"hljs-selector-class\">.json</span>\n</code></pre>\n<p>Sollten Sie noch irgendwo die alten RxJS-Operatoren statt der Pipeable Operators verwenden,\nso werden diese automatisch mittels <code>rxjs-compat</code> weiterhin laufen.\nWenn Sie keine Pipeable Operators mehr verwenden und auch keine Drittabieterbibliotheken mehr darauf basieren, können und sollten Sie das Paket <code>rxjs-compat</code> entfernen.</p>\n<p>In unserem Fall war schon alles auf Pipeable Operators umgestellt und <code>rxjs-compat</code> wurde nicht hinzugefügt, weswegen wir es auch nicht entfernen mussten.</p>\n<p>Unser Projekt ist wieder auf dem aktuellsten Stand – und das in wenigen automatisierten Schritten!\nSollten wir einen Schritt bzw. einen Fall übersehen haben, so schreiben Sie uns bitte an <strong><a href=\"mailto:&#x74;&#x65;&#97;&#109;&#64;&#x61;&#110;&#103;&#117;&#108;&#x61;&#114;&#45;&#98;&#x75;&#x63;&#x68;&#x2e;&#99;&#111;&#x6d;\">&#x74;&#x65;&#97;&#109;&#64;&#x61;&#110;&#103;&#117;&#108;&#x61;&#114;&#45;&#98;&#x75;&#x63;&#x68;&#x2e;&#99;&#111;&#x6d;</a></strong> oder senden Sie doch gleich einen <a href=\"https://github.com/angular-buch/website-articles/blob/gh-pages/blog/2018-05-angular6/README.md\">pull request</a>.</p>\n<h3 id=\"tree-shakable-providers-1\">Tree-Shakable Providers</h3>\n<p>Der <code>BookStoreService</code> wird im Moment explizit im <code>AppModule</code> provided.\nDieser Weg wird auch weiterhin unterstützt.\nMöchten Sie den Service trotzdem auf den neuen <em>tree-shakable</em> Weg migrieren, sind folgende Schritte nötig:</p>\n<h4 id=\"1-providedin-im-service-hinzufügen\">1.) <code>providedIn</code> im Service hinzufügen</h4>\n<pre><code class=\"language-ts\"><span class=\"hljs-variable\">@Injectable</span>({ providedIn: <span class=\"hljs-string\">&#x27;root&#x27;</span> })\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookStoreService</span> </span>{\n  // ...\n}\n</code></pre>\n<h4 id=\"2-referenz-und-import-aus-dem-appmodule-entfernen\">2.) Referenz und Import aus dem <code>AppModule</code> entfernen</h4>\n<pre><code class=\"language-ts\">// import { BookStoreService } from <span class=\"hljs-string\">&#x27;./shared/book-store.service&#x27;</span>; &lt;-- entfernen\n\n<span class=\"hljs-variable\">@NgModule</span>({\n  <span class=\"hljs-regexp\">//</span> ...\n  providers: [\n    <span class=\"hljs-regexp\">//</span> BookStoreService, &lt;-- entfernen\n    BookResolver\n  ]\n})\nexport <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{}\n</code></pre>\n<hr>\n\n\n<p><strong>Wir wünschen Ihnen viel Spaß mit Angular 6 und beim Lesen unseres Buchs! Haben Sie Fragen? Schreiben Sie uns!</strong></p>\n<ul>\n<li><strong>Danny, Ferdinand und Johannes</strong></li>\n</ul>\n<br>\n<br>\n----\n\n<h3 id=\"troubleshooter-1---error-cannot-find-module-true-case-path\">Troubleshooter 1 - <code>Error: Cannot find module &#39;true-case-path&#39;</code></h3>\n<p>Bei unserem Setup (NPM 5 mit <code>package-lok.json</code>) ist uns aufgefallen, dass ein normales <code>npm install</code> nicht mehr funktioniert:</p>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-keyword\">install</span>\n</code></pre>\n<p><strong>Fehlermeldung:</strong></p>\n<pre><code class=\"language-bash\">&gt; node-sass@4.7.2 install /angular-buch/iteration<span class=\"hljs-string\">-7</span>-i18n/node_modules/node-sass\n&gt; node scripts/install.js\n\nmodule.js:557\n    throw err;\n    ^\n\n<span class=\"hljs-keyword\">Error: </span>Cannot find module &#x27;true-case-path&#x27;\n</code></pre>\n<p>Das ist etwas ärgerlich, aber leicht behoben.\nÜbeltäter ist die Datei <code>package-lock.json</code>.\nDie Aufgabe der Datei ist es, einen &quot;Schnappschuss&quot; von einer funktionierenden Kombination an NPM-Paketen zu machen.\nBeim Upgraden kann dies fürchterlich hinderlich sein.\nHier wollen wir von allen Paketen natürlich den neuesten Stand - und nicht einen Stand mit neuesten und nicht ganz so neuen Paketen.\nDaher kann die Lock-Datei gelöscht werden, sie wird beim nächsten <code>npm install</code> sowieso wieder erstellt:</p>\n<ol>\n<li><code>package-lock.json</code> löschen</li>\n<li><code>node_modules</code> löschen (zur Sicherheit)</li>\n<li><code>npm install</code> - sollte jetzt problemlos durchlaufen</li>\n</ol>\n<p><a href=\"https://stackoverflow.com/a/48322891\">Laut Stack Overflow</a> sollte es ebenso ausreichen, node.js und NPM auf den allerneusten Stand zu bringen.</p>\n<h3 id=\"troubleshooter-2---error-cannot-find-module-angular-devkitcore\">Troubleshooter 2 - <code>Error: Cannot find module &#39;@angular-devkit/core&#39;</code></h3>\n<p>Beim zweiten uns bekannten Fehler funktioniert das Upgraden des Projekts nicht richtig.\nWir danken unseren Leser Jens für den Hinweis!</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">npm</span> install\n<span class=\"hljs-built_in\">npm</span> install @angular/cli\nng update @angular/cli\n</code></pre>\n<p><strong>Fehlermeldung:</strong></p>\n<pre><code class=\"language-bash\">module.js:557\n    throw err;\n    ^\n\n<span class=\"hljs-keyword\">Error: </span>Cannot find module &#x27;@angular-devkit/core&#x27;\n</code></pre>\n<p>Dieser <a href=\"https://github.com/angular/angular-cli/issues/9307\">Bug</a> ist mit über 100 Kommentaren sehr populär.\nWir konnten diesen Bug reproduzieren und haben eine <a href=\"https://github.com/angular/angular-cli/issues/9307#issuecomment-396081033\">sehr simple Lösung</a> gefunden.\nBitte einfach <strong>noch einmal</strong> ausführen:</p>\n<pre><code><span class=\"hljs-built_in\">npm</span> install @angular/cli\n</code></pre>\n<p>Schon ist das vermisste NPM-Paket <code>@angular-devkit/core</code> wieder da.</p>\n<h3 id=\"troubleshooter-3---the-specified-command-update-is-invalid\">Troubleshooter 3 - <code>The specified command update is invalid.</code></h3>\n<p>In älteren Projekten fand sich in der <code>package.json</code> folgende Angabe:</p>\n<pre><code>  <span class=\"hljs-string\">&quot;devDependencies&quot;</span>: {\n    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@angular</span>/cli&quot;</span>: <span class=\"hljs-string\">&quot;1.5.4&quot;</span>\n</code></pre>\n<p>Mittlerweile schreibt man hier stets ein Zirkumflex <strong>^</strong> hinein.\n<strong>Warum?</strong> Weil das <code>npm install @angular/cli</code> die Version nicht auf 1.7.4 bringen wird, sondern bei v1.5.4 bleibt.\n<strong>Problem:</strong> Erst mit der <a href=\"https://github.com/angular/angular-cli/releases/tag/v1.7.0\">v1.7.0</a> wurde der <code>ng update</code> eingeführt.</p>\n<p>Der Befehl:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">ng</span> update <span class=\"hljs-variable\">@angular</span>/cli\n</code></pre>\n<p>führt dann natürlich zu folgender <strong>Fehlermeldung:</strong></p>\n<pre><code class=\"language-bash\">Your <span class=\"hljs-keyword\">global</span> Angular CLI version (<span class=\"hljs-number\">6.0</span><span class=\"hljs-number\">.8</span>) <span class=\"hljs-keyword\">is</span> greater than your <span class=\"hljs-keyword\">local</span>\nversion (<span class=\"hljs-number\">1.5</span><span class=\"hljs-number\">.4</span>). The <span class=\"hljs-keyword\">local</span> Angular CLI <span class=\"hljs-keyword\">version</span> <span class=\"hljs-keyword\">is</span> used.\n\n<span class=\"hljs-keyword\">To</span> <span class=\"hljs-keyword\">disable</span> this <span class=\"hljs-built_in\">warning</span> use &quot;ng config -g cli.warnings.versionMismatch false&quot;.\nThe specified command <span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">is</span> invalid. <span class=\"hljs-keyword\">For</span> available <span class=\"hljs-keyword\">options</span>, see `ng help`.\n</code></pre>\n<p>Allerdings steht nach der ersten Ausführung von <code>npm install @angular/cli</code> nun Folgendes in der <code>package.json</code>:</p>\n<pre><code>  <span class=\"hljs-string\">&quot;devDependencies&quot;</span>: {\n    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@angular</span>/cli&quot;</span>: <span class=\"hljs-string\">&quot;^1.5.4&quot;</span>\n</code></pre>\n<p> Ein erneutes <code>npm install @angular/cli</code> bringt uns nun endlich auf die gewünschte v1.7.4.</p>\n","meta":{"title":"Angular 6 ist da!","author":"Angular Buch Team","mail":"team@angular-buch.com","published":"2018-05-21T00:00:00.000Z","lastModified":"2018-10-18T00:00:00.000Z","keywords":["Angular","Angular 6","RxJS","Tree-Shakable Providers","Angular CLI"],"language":"de","header":{"url":"angular6.png","width":2600,"height":555},"sticky":false}}
