{"slug":"2019-12-docker1-simple-case","html":"<p><strong>First Steps:\nWie Sie Ihre Angular-App in ein Docker-Image packen und als Container zur Ausf√ºhrung bringen.\nVergessen Sie Ihre Sorgen √ºber den korrekten Build und das richtige Deployment!\nDies ist der 2. Teil unserer vierteiligen Artikelserie zu Angular und Docker.</strong></p>\n<p>Inhaltsverzeichnis:</p>\n<ul>\n<li><a href=\"/blog/2019-12-docker1-simple-case#konfiguration-des-webservers\">Konfiguration des Webservers</a></li>\n<li><a href=\"/blog/2019-12-docker1-simple-case#das-dockerfile\">Das Dockerfile</a></li>\n<li><a href=\"/blog/2019-12-docker1-simple-case#das-build-skript\">Das Build-Skript</a></li>\n<li><a href=\"/blog/2019-12-docker1-simple-case#den-container-starten\">Den Container starten</a></li>\n<li><a href=\"/blog/2019-12-docker1-simple-case#ausblick\">Ausblick</a></li>\n</ul>\n<blockquote>\n<p>Sie finden den Code zum Artikel auf\n<a href=\"https://github.com/MichaelKaaden/dockerized-app/tree/master/Part-1-Simple-Case\">GitHub</a>.</p>\n</blockquote>\n<p>Es ist ganz einfach, eine Angular-App zu &quot;dockerisieren&quot;. Sie brauchen keinerlei Code in Ihrer App zu √§ndern, um sie in einem Docker-Container zu betreiben.\nSie m√ºssen lediglich die Dateien hinzuf√ºgen, die ich Ihnen in diesem Artikel vorstelle.</p>\n<h2 id=\"konfiguration-des-webservers\">Konfiguration des Webservers</h2>\n<p>Als Webserver werden wir <a href=\"http://nginx.org/\">nginx</a> verwenden.\nKeine Sorge, wenn Sie diesen noch nie selbst benutzt, geschweige denn konfiguriert haben.\nErstellen Sie im Wurzelverzeichnis Ihrer App ein Verzeichnis namens <code>nginx</code> und legen Sie darin eine Datei namens <code>default.conf</code> mit folgendem Inhalt an:</p>\n<pre><code class=\"language-nginx\"><span class=\"hljs-section\">server</span> {\n  <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n  <span class=\"hljs-attribute\">server_name</span> localhost;\n\n  <span class=\"hljs-section\">location</span> / {\n    <span class=\"hljs-attribute\">root</span> /usr/share/nginx/html;\n    <span class=\"hljs-attribute\">index</span> index.html;\n\n    <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ /index.html;\n  }\n}\n</code></pre>\n<p>Im Wesentlichen besagt diese Konfiguration, dass der Webserver <em>im Container</em>\nauf Port 80 lauschen wird, die App im Verzeichnis <code>/usr/share/nginx/html</code> abgelegt ist und jeder URL auf <code>/index.html</code> &quot;umgebogen&quot; wird.\nIm Betrieb k√∂nnen Sie den Container auf jedem beliebigen Port Ihres Rechners betreiben.\nDieser Port wird dann an den Container-Port 80 weitergeleitet und landet damit auf dem Webserver im Container.</p>\n<h2 id=\"das-dockerfile\">Das Dockerfile</h2>\n<p>Als n√§chstes erstellen Sie ebenfalls im Wurzelverzeichnis Ihrer App eine Datei\nnamens <code>Dockerfile</code>.\nDocker verwendet diese Datei, um ein Image mit Ihrer App zu erstellen.</p>\n<pre><code class=\"language-dockerfile\"><span class=\"hljs-keyword\">FROM</span> nginx\n<span class=\"hljs-keyword\">LABEL</span><span class=\"language-bash\"> maintainer=<span class=\"hljs-string\">&quot;Ihr Name &lt;you@your.domain&gt;&quot;</span></span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> nginx/default.conf /etc/nginx/conf.d</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> dist/dockerized-app /usr/share/nginx/html</span>\n</code></pre>\n<p>Diese Datei verwendet das jeweils neueste <code>nginx</code>-Image als Basis, setzt darin Ihren Namen als den des Zust√§ndigen, kopiert die Konfigurationsdatei und schlie√ülich Ihre (bereits gebaute) Angular-App in das Image.\nFalls Sie diese Anleitung mit Ihrer eigenen App nachvollziehen, setzen Sie f√ºr <code>dist/dockerized-app</code> bitte das entsprechende Verzeichnis Ihrer App ein.</p>\n<p>Damit k√∂nnten wir das Docker-Image nun bereits bauen.\nUm den n√∂tigen Zeitaufwand zum Bau zu verringern, sollten Sie eine Datei <code>.dockerignore</code> folgenden Inhalts erstellen, um zu verhindern, dass dabei jedes Mal unn√∂tige Dateien und Verzeichnisse vom Docker-Daemon verarbeitet werden:</p>\n<pre><code><span class=\"hljs-selector-class\">.dockerignore</span>\n<span class=\"hljs-selector-class\">.editorconfig</span>\n<span class=\"hljs-selector-class\">.git</span>\n<span class=\"hljs-selector-class\">.gitignore</span>\n<span class=\"hljs-selector-class\">.idea</span>\nREADME<span class=\"hljs-selector-class\">.md</span>\nangular<span class=\"hljs-selector-class\">.json</span>\ncoverage\ne2e\nnode_modules\npackage<span class=\"hljs-selector-class\">.json</span>\npackage-lock<span class=\"hljs-selector-class\">.json</span>\n<span class=\"hljs-attribute\">src</span>\ntsconfig<span class=\"hljs-selector-class\">.json</span>\ntslint<span class=\"hljs-selector-class\">.json</span>\nyarn.lock\n</code></pre>\n<h2 id=\"das-build-skript\">Das Build-Skript</h2>\n<p>Das Docker-Image mit Ihrer App k√∂nnen Sie nun erstellen, indem Sie folgende Beschw√∂rungsformeln in der angegebenen Reihenfolge murmeln: <code>npm install</code> (oder <code>yarn install</code>, wenn Sie Ihre Pakete stattdessen mit <code>yarn</code> verwalten), <code>ng build --prod</code> und schlie√ülich <code>docker build -t dockerized-app .</code> (bitte vergessen Sie den Punkt am Ende nicht!).\nAuch hier sollten Sie das <code>dockerized-app</code> durch den Namen Ihrer App ersetzen, denn unter diesem Namen legt Docker das Image auf Ihrem Rechner ab.</p>\n<p>Ich bin ein gro√üer Fan davon, all die Schritte zu automatisieren, die ich st√§ndig wiederholen muss. Deshalb habe ich diese Schritte in einem Skript <code>dockerize.sh</code> zusammengefasst:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#!/bin/bash</span>\nyarn install\nng build --prod\ndocker build -t dockerized-app .\n</code></pre>\n<p>Sollten Sie statt auf macOS oder Linux auf Windows unterwegs sein, m√ºssen Sie stattdessen ein Batch-File oder ein PowerShell-Skript mit entsprechender Syntax verwenden.</p>\n<p>Am besten ist es, wenn Sie das Skript gleich ausprobieren. Bei mir sieht das so aus:</p>\n<pre><code class=\"language-console\">$ ./dockerize<span class=\"hljs-selector-class\">.sh</span>\nyarn install v1.<span class=\"hljs-number\">13.0</span>\n<span class=\"hljs-selector-attr\">[1/4]</span> üîç  Resolving packages...\nsuccess Already up-to-date.\n‚ú®  Done <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.41s</span>.\n\nDate: <span class=\"hljs-number\">2019</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">09</span>T14:<span class=\"hljs-number\">56</span>:<span class=\"hljs-number\">24.367</span>Z\nHash: e6105fbbd24ce43b0f57\nTime: <span class=\"hljs-number\">10178ms</span>\nchunk {<span class=\"hljs-number\">0</span>} runtime<span class=\"hljs-selector-class\">.a5dd35324ddfd942bef1</span><span class=\"hljs-selector-class\">.js</span> (runtime) <span class=\"hljs-number\">1.41</span> kB <span class=\"hljs-selector-attr\">[entry]</span> <span class=\"hljs-selector-attr\">[rendered]</span>\nchunk {<span class=\"hljs-number\">1</span>} es2015-polyfills.<span class=\"hljs-number\">358</span>ed1827c991dd2afb0<span class=\"hljs-selector-class\">.js</span> (es2015-polyfills) <span class=\"hljs-number\">56.4</span> kB <span class=\"hljs-selector-attr\">[initial]</span> <span class=\"hljs-selector-attr\">[rendered]</span>\nchunk {<span class=\"hljs-number\">2</span>} <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.e87fb3df99e6b4b142c4</span><span class=\"hljs-selector-class\">.js</span> (main) <span class=\"hljs-number\">239</span> kB <span class=\"hljs-selector-attr\">[initial]</span> <span class=\"hljs-selector-attr\">[rendered]</span>\nchunk {<span class=\"hljs-number\">3</span>} polyfills.<span class=\"hljs-number\">407</span>a467dedb63cfdd103<span class=\"hljs-selector-class\">.js</span> (polyfills) <span class=\"hljs-number\">41</span> kB <span class=\"hljs-selector-attr\">[initial]</span> <span class=\"hljs-selector-attr\">[rendered]</span>\nchunk {<span class=\"hljs-number\">4</span>} styles.<span class=\"hljs-number\">3</span>ff695c00d717f2d2a11<span class=\"hljs-selector-class\">.css</span> (styles) <span class=\"hljs-number\">0</span> bytes <span class=\"hljs-selector-attr\">[initial]</span> <span class=\"hljs-selector-attr\">[rendered]</span>\n\nSending build context to Docker daemon  <span class=\"hljs-number\">393.7</span>kB\nStep <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">4</span> : FROM nginx\n ---&gt; <span class=\"hljs-number\">42</span>b4762643dc\nStep <span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">4</span> : LABEL maintainer=<span class=\"hljs-string\">&quot;Michael Kaaden &lt;github@kaaden.net&gt;&quot;</span>\n ---&gt; Using cache\n ---&gt; ebd7affcf553\nStep <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">4</span> : COPY nginx/default<span class=\"hljs-selector-class\">.conf</span> /etc/nginx/conf<span class=\"hljs-selector-class\">.d</span>\n ---&gt; Using cache\n ---&gt; <span class=\"hljs-number\">65</span>b24d481385\nStep <span class=\"hljs-number\">4</span>/<span class=\"hljs-number\">4</span> : COPY dist/dockerized-app /usr/share/nginx/<span class=\"hljs-selector-tag\">html</span>\n ---&gt; Using cache\n ---&gt; a6f5cd965884\nSuccessfully built a6f5cd965884\nSuccessfully tagged dockerized-app:latest\n</code></pre>\n<p>Damit sollte auf Ihrer Docker-Instanz ein Image namens <code>dockerized-app</code> vorliegen.\nSie k√∂nnen das mit dem Befehl <code>docker images</code> √ºberpr√ºfen:</p>\n<pre><code class=\"language-console\">$ docker images\nREPOSITORY      <span class=\"hljs-keyword\">TAG</span>     <span class=\"hljs-title\">IMAGE</span> ID       CREATED         SIZE\ndockerized-app  latest  <span class=\"hljs-number\">419869</span>cfab04   <span class=\"hljs-number\">10</span> seconds ago  <span class=\"hljs-number\">110M</span>B\n</code></pre>\n<h2 id=\"den-container-starten\">Den Container starten</h2>\n<p>Wir wollen nun einen Container auf Basis des eben erzeugten Images starten.\nZur Erinnerung: Container zu Image verh√§lt sich wie Instanz zu Klasse in der objektorientierten Programmierung.\nVerwenden Sie den Befehl <code>docker run -p 8093:80 -d --name web dockerized-app</code>, um einen Container zu erstellen.\nEr stellt einen Container namens <code>web</code> auf Ihrem Rechner auf Port 8093 bereit.\nIhr Browser sollte Ihre App also unter <code>http://localhost:8093/</code> anzeigen, falls sie den Container auf Ihrer Workstation gestartet haben.\nAnsonsten verwenden Sie nat√ºrlich den passenden Rechnernamen statt <code>localhost</code>.</p>\n<p>Um den Container wieder zu stoppen, geben Sie <code>docker stop web</code> ein.\nAlle laufenden Container k√∂nnen Sie jederzeit mit dem Befehl <code>docker ps</code> anzeigen.</p>\n<p>Auch das Erstellen eines Containers k√∂nnen wir √ºber ein Skript automatisieren.\nGerade f√ºr komplexere Szenarien mit mehreren Containern hat Docker das Tool <a href=\"https://docs.docker.com/compose/\">docker-compose</a> entwickelt.\nF√ºr unseren vereinfachten Anwendungsfall mit nur einem Service sieht die zu obigem Aufruf\n√ºber die Kommandozeile identische Konfigurationsdatei <code>docker-compose.yml</code> folgenderma√üen aus:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-symbol\">version:</span> <span class=\"hljs-string\">&quot;3&quot;</span>\n<span class=\"hljs-symbol\">\nservices:</span>\n<span class=\"hljs-symbol\">    web:</span>\n<span class=\"hljs-symbol\">        image:</span> dockerized-app\n<span class=\"hljs-symbol\">        ports:</span>\n            - <span class=\"hljs-string\">&quot;8093:80&quot;</span>\n</code></pre>\n<p>Um Ihren Container zu starten, verwenden Sie nun einfach den Befehl <code>docker-compose up -d</code>.\nVergessen Sie bitte nicht das <code>-d</code>, da Ihr Container sonst im Vordergrund l√§uft und Sie Ihre Shell solange nicht mehr nutzen k√∂nnen, bis der Container beendet ist.\nDas erreichen Sie √ºbrigens mit <code>docker-compose down</code>.</p>\n<p>Jedes Mal, wenn Sie Ihre App √§ndern, m√ºssen Sie ein neues Image bauen.\nDas geht schnell, da alle Images aus Schichten (engl. <em>layers</em>) bestehen, die von Docker zwischengespeichert werden.\nUnsere √Ñnderung betrifft allerdings nur die letzte Schicht (die mit dem\n<code>COPY dist/dockerized-app /usr/share/nginx/html</code>), sodass auch nur diese Schicht neu gebaut wird.\nUm dieses neueste Image zur Ausf√ºhrung zu bringen, m√ºssen Sie den alten Container erst beenden und den neuen starten.\nAuch hier bietet sich ein Skript an, ich nenne es <code>redeploy.sh</code>:</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#! /bin/bash</span>\ndocker-compose down --remove-orphans\ndocker-compose up -d\n</code></pre>\n<p>Damit haben Sie alles N√∂tige zur Hand, um Ihre App sinnvoll in einem Docker-Container zu betreiben.</p>\n<h2 id=\"ausblick\">Ausblick</h2>\n<p>Die Artikelserie besteht aus den folgenden Teilen:</p>\n<ol>\n<li><a href=\"https://angular-buch.com/blog/2019-12-docker0-intro\">Angular-Apps und Docker: Einleitung</a></li>\n<li><a href=\"https://angular-buch.com/blog/2019-12-docker1-simple-case\">Angular-App √ºber Docker bereitstellen</a> <strong>(der aktuelle Artikel)</strong></li>\n<li><a href=\"https://angular-buch.com/blog/2019-12-docker2-build-once-run-anywhere\">Build Once, Run Anywhere oder: Konfiguration √ºber Docker verwalten</a></li>\n<li><a href=\"https://angular-buch.com/blog/2019-12-docker3-multi-stage-build\">Multi-Stage Builds oder: Immer die Build-Umgebung dabei haben</a></li>\n</ol>\n<p>Im n√§chsten Artikel zeige ich Ihnen, wie Sie Ihre App von Docker aus konfigurieren k√∂nnen.\nDas ist dann wichtig, wenn Sie beispielsweise gegen ein Backend programmieren und den URL zum Backend √ºber Docker vorgeben m√∂chten.</p>\n<br>\n<hr>\n\n<p><small><strong>Titelbild:</strong> Bild von <a href=\"https://unsplash.com/@guibolduc\">Guillaume Bolduc</a> auf <a href=\"https://unsplash.com\">Unsplash</a>, bearbeitet</small></p>\n","meta":{"title":"[Docker Serie 2/4] Angular-App √ºber Docker bereitstellen","author":"Michael Kaaden","mail":"blog@kaaden.net","bio":"Michael Kaaden ist als Software-Architekt und Manager f√ºr ein mittelst√§ndisches Unternehmen in N√ºrnberg t√§tig. Dort ist er f√ºr die technische Seite einer Cloud-Produktline verantwortlich. In dieser Eigenschaft k√ºmmert er sich trotz seiner grunds√§tzlichen Affinit√§t zu Angular nicht nur um Frontends, sondern neben der Gesamtarchitektur unter anderem auch um APIs, Backends, Datenbanken sowie Software-Entwicklungs- und Build-Prozesse. Wenn er in seiner Freizeit nicht gerade mit seiner Familie unterwegs ist, Full-Stack Developer spielt oder seine Nase in neue Technologien steckt, versucht er, seinen Laufstil zu verbessern und endlich den f√ºr ihn perfekten Fotoapparat zu finden.","published":"2019-12-09T00:00:00.000Z","keywords":["Docker","nginx","Build","docker-compose"],"language":"de","thumbnail":"https://website-articles.angular-buch.com/2019-12-docker1-simple-case/header1.jpg"}}
