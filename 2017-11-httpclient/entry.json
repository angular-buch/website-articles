{"slug":"2017-11-httpclient","html":"<h2 id=\"abstract\">Abstract</h2>\n<blockquote>\n<p>Mit Version 4.3 des Angular-Frameworks steht ein neuer HttpClient bereit.\nDieser weist eine stärkere Typisierung auf und vereinfacht die Verarbeitung von geladenen Daten.\nDieser Artikel zeigt Ihnen die wichtigsten Änderungen zum alten HTTP-Service. Sie werden lernen, wie Sie das neue <code>HttpClientModule</code> einsetzen können und welche Vorteile es Ihnen bringt. Ein kleines Beispiel demonstriert Ihnen die Nutzung des neuen <code>HttpClient</code>.</p>\n</blockquote>\n<h2 id=\"lohnt-sich-das-update\">Lohnt sich das Update?</h2>\n<p>Wenn Sie derzeit den herkömmlichen <code>Http</code>-Service von Angular nutzen, ist ein Update unter allen Umständen zu empfehlen.\nDas <code>HttpModule</code> ist bereits als <em>deprecated</em> gekennzeichnet. Das bedeutet, dass es in einer künftigen Version von Angular entfernt wird.</p>\n<p><strong>Die kurze Antwort lautet: Das Update lohnt sich nicht nur, es ist darüber hinaus auch notwendig.</strong></p>\n<blockquote>\n<p><strong>Eine Anmerkung zu @angular/http</strong>\nWenn <code>@angular/common/http</code> eingesetzt wird, kann in vielen Fällen <code>@angular/http</code> aus dem Projekt entfernt werden. An dieser Stelle ist etwas Vorsicht geboten: Angular-Bibliotheken, die von der Community oder Drittanbietern entwickelt wurden, können nach wie vor eine Abhängigkeit zu <code>@angular/http</code> aufweisen. Darum ist es für bestehende Projekte empfehlenswert zu prüfen, ob die vorherige Version des HTTP-Moduls entfernt werden kann oder ob eine Migration nötig ist.</p>\n</blockquote>\n<h2 id=\"die-neue-http-bibliothek-im-überblick\">Die neue HTTP-Bibliothek im Überblick</h2>\n<p>Die neue Bibliothek zum Laden von Daten über HTTP heißt <code>HttpClientModule</code>.\nSie kann aus dem Paket <code>@angular/common/http</code> importiert werden.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { HttpClientModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/http&#x27;</span>;\n</code></pre>\n<p>Das Modul weist eine kleinere Bundle-Größe auf als sein Vorgänger.</p>\n<p>Der Name des Clients hat sich von <code>Http</code> in <code>HttpClient</code> geändert.\nDie gute Nachricht ist, dass beide Clients problemlos parallel betrieben werden können.\nSomit ist eine schrittweise Aktualisierung von bestehenden Angular-Apps möglich.</p>\n<p>Neben einigen Änderungen in der API können <em>HttpRequests</em> nun vor dem Absenden zur API verändert werden.\nDas ist nützlich, wenn Sie Informationen zur Authentifizierung, Fortschrittsanzeigen oder Logging zentral einrichten und steuern möchten.\nHinter dem beschriebenen Mechanismus verbergen sich die <em>Interceptors</em>.\nWenn Sie Ihren eigenen Interceptor schreiben möchten, finden Sie unter <a href=\"https://angular.io/guide/http#advanced-usage\">https://angular.io/guide/http#advanced-usage</a> einen Guide, der alles zeigt, was Sie benötigen.</p>\n<h2 id=\"tldr--am-beispiel-lernen\">TL;DR – am Beispiel lernen</h2>\n<p>Wenn Sie ein erfahrener Angular-Entwickler sind, benötigen Sie den theoretischen Teil eventuell nicht.\nFalls das auf Sie zutrifft, können Sie in der folgenden Demo sehen, wie der <code>HttpClient</code> eingesetzt wird.</p>\n<p>Für eine ausführlichere Erläuterung lesen Sie einfach weiter.</p>\n<iframe\n  style=\"width: 100%; height: 600px\"\n  src=\"https://embed.plnkr.co/XH4zUY/?show=app/book-store.service.ts,preview&deferRun\"\n  frameborder=\"0\"\n  allowfullscren=\"allowfullscren\">\n</iframe>\n\n<h2 id=\"das-httpclientmodule-verwenden\">Das HttpClientModule verwenden</h2>\n<p>Ab Version 4.3 ist Angulars neue HTTP-Bibliothek in <code>@angular/common/http</code> enthalten.\nUm das <code>HttpClientModule</code> einzubinden, muss es im betreffenden <code>NgModule</code> registriert werden.\nIn unserem Beispiel binden wir es im <code>AppModule</code> ein.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">/* ... */</span>\n<span class=\"hljs-keyword\">import</span> { HttpClientModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/http&#x27;</span>;\n\n@NgModule({\n  imports:      [BrowserModule, HttpClientModule],\n  declarations: [AppComponent],\n  bootstrap:    [AppComponent]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppModule</span> { }\n</code></pre>\n<p>Damit steht der <code>HttpClient</code> in der gesamten Anwendung zur Verfügung.</p>\n<h2 id=\"der-httpclient--typsicher-und-produktiv\">Der HttpClient – typsicher und produktiv</h2>\n<p>Um den <code>HttpClient</code> zu verwenden, hat sich bis auf den Namen nichts im Vergleich zum Vorgänger verändert.\nBeim Importieren ist zu beachten, dass der Pfad <code>@angular/common/http</code> verwendet wird.\nDas folgende Snippet zeigt, wie der <code>HttpClient</code> in einen Service eingebunden werden kann.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">HttpClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/http&#x27;</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookStoreService</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">http</span>: <span class=\"hljs-title class_\">HttpClient</span></span>) {}\n}\n</code></pre>\n<p>Das Angular-Team hat sich die Nutzung des HTTP-Dienstes angesehen und festgestellt,\ndass in den meisten Fällen nur der Payload der <em>Response</em> verarbeitet wird.\nAus diesem Grund gibt der <code>HttpClient</code> nicht mehr das gesamte Response-Objekt zurück.\nDadurch vereinfacht sich das Mapping, denn der Aufruf <code>response.json()</code> ist nicht mehr notwendig.</p>\n<p>Darüber hinaus ist es möglich, das erwartete Ergebnis eines Requests zu typisieren.</p>\n<pre><code class=\"language-typescript\">this.<span class=\"hljs-keyword\">http</span>\n  .<span class=\"hljs-built_in\">get</span>&lt;T&gt;(<span class=\"hljs-comment\">/* URL */</span>): Observable&lt;T&gt;\n  .<span class=\"hljs-built_in\">put</span>&lt;T&gt;(<span class=\"hljs-comment\">/* URL */</span>, <span class=\"hljs-comment\">/* Payload */</span>): Observable&lt;T&gt;\n  .<span class=\"hljs-built_in\">post</span>&lt;T&gt;(<span class=\"hljs-comment\">/* URL */</span>, <span class=\"hljs-comment\">/* Payload */</span>): Observable&lt;T&gt;\n  .<span class=\"hljs-built_in\">delete</span>&lt;T&gt;(<span class=\"hljs-comment\">/* URL */</span>): Observable&lt;T&gt;\n</code></pre>\n<p>Trotzdem ist der Zugriff auf das <code>HttpResponse</code>-Objekt weiterhin möglich.\nDazu muss lediglich ein weiterer Parameter übergeben werden:\nMit der Option <code>{ observe: &#39;response&#39; }</code> liefert der Aufruf die gesamte <code>HttpResponse</code> zurück – nicht nur den Payload.\nDas erlaubt Ihnen zum Beispiel das Auslesen von Header-Daten und Status-Codes.</p>\n<pre><code class=\"language-typescript\">this<span class=\"hljs-selector-class\">.http</span>\n  <span class=\"hljs-selector-class\">.get</span>(<span class=\"hljs-comment\">/* URL */</span>, { observe: <span class=\"hljs-string\">&#x27;response&#x27;</span> }): Observable&lt;HttpResponse&gt;\n  .<span class=\"hljs-built_in\">put</span>(<span class=\"hljs-comment\">/* URL */</span>, <span class=\"hljs-comment\">/* Payload */</span>, { observe: <span class=\"hljs-string\">&#x27;response&#x27;</span> }): Observable&lt;HttpResponse&gt;\n  .<span class=\"hljs-built_in\">post</span>(<span class=\"hljs-comment\">/* URL */</span>, <span class=\"hljs-comment\">/* Payload */</span>, { observe: <span class=\"hljs-string\">&#x27;response&#x27;</span> }): Observable&lt;HttpResponse&gt;\n  .<span class=\"hljs-built_in\">delete</span>(<span class=\"hljs-comment\">/* URL */</span>, { observe: <span class=\"hljs-string\">&#x27;response&#x27;</span> }): Observable&lt;HttpResponse&gt;\n</code></pre>\n<p>Durch die stärkere Typisierung können wir nun spezifizieren, welche Daten von der API erwartet werden.\nFür die Daten der <a href=\"https://book-monkey2-api.angular-buch.com\">BookMonkey-API</a> kann beispielswise folgendes Interface bereitgestellt werden, um die JSON-Daten zu beschreiben:</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BookRaw</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">subtitle</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">isbn</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">rating</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">authors</span>: <span class=\"hljs-built_in\">string</span>[];\n}\n</code></pre>\n<p>Die Daten der API müssen in manchen Fällen transformiert werden, damit sie in der Anwendung eingesetzt werden können.\nIn unserem Fall ist das Zielformat die Klasse <code>Book</code>.\nIm Gegensatz zu <code>BookRaw</code> bildet <code>Book</code> hier das Autorenteam in Form einer Zeichenkette ab und verzichtet auf die Anzeige der Bewertung.</p>\n<pre><code class=\"language-typescript\">export <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">BookRaw</span> </span>{\n  <span class=\"hljs-title function_ invoke__\">constructor</span>(\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">subtitle</span>: <span class=\"hljs-keyword\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">isbn</span>: <span class=\"hljs-keyword\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">description</span>: <span class=\"hljs-keyword\">string</span>,\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">authorTeam</span>: <span class=\"hljs-keyword\">string</span>\n  ) {}\n}\n</code></pre>\n<p>Um aus den Daten der API die gewünschten Klasseninstanzen zu erzeugen, kann mit den bekannten Operatoren gearbeitet werden.\nIm folgenden Beispiel wird der Service <code>BookStoreService</code> erweitert.\nEine Bücherliste wird von der <a href=\"https://book-monkey2-api.angular-buch.com\">BookMonkey-API</a> geladen.\nDie geladenen Daten haben den Typ <code>BookRaw[]</code>.\nDer Service sorgt dafür, dass Komponenten mit dem Typ <code>Book[]</code> arbeiten können.\nDazu wird die Liste mit Hilfe des RxJS-Operators <code>map</code> transformiert.</p>\n<blockquote>\n<p>An dieser Stelle sei der Hinweis gestattet, dass RxJS-Operatoren zusätzlich importiert werden müssen.\nDer <code>map</code>-Operator kann mit folgendem Statement geladen werden: <code>import &#39;rxjs/add/operator/map&#39;;</code>\nAuf die <em>Pipeable Operators</em> (vorher: Lettable Operators) haben wir an dieser Stelle noch verzichtet. Auf GitHub ist der gesamte Quelltext allerdings aktualisiert.</p>\n</blockquote>\n<p>Das Mapping wird in die Methode <code>provideBooksFrom()</code> ausgelagert, damit der Code lesbarer ist.\nSie werden bemerken, dass der Übergabeparameter <code>raws</code> im <code>map</code>-Operator mit <code>BookRaw[]</code> typisiert ist.\nDie explizite Typisierung innerhalb des Operators entfällt.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs/Observable&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;rxjs/add/operator/map&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Book</span>, <span class=\"hljs-title class_\">BookRaw</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./models/book&#x27;</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookStoreService</span> {\n  api = <span class=\"hljs-string\">&#x27;https://book-monkey2-api.angular-buch.com&#x27;</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">http</span>: <span class=\"hljs-title class_\">HttpClient</span></span>) {}\n\n  <span class=\"hljs-title function_\">getAll</span>(): <span class=\"hljs-title class_\">Observable</span>&lt;<span class=\"hljs-title class_\">Book</span>[]&gt; {\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">http</span>\n       .<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-title class_\">BookRaw</span>[]&gt;(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.api}</span>/books`</span>)\n       .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">raws</span> =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">provideBooksFrom</span>(raws));\n       <span class=\"hljs-comment\">//   ^-- raws ist vom Typ BookRaw[]</span>\n  }\n\n  <span class=\"hljs-title function_\">provideBooksFrom</span>(<span class=\"hljs-attr\">raws</span>: <span class=\"hljs-title class_\">BookRaw</span>[]): <span class=\"hljs-title class_\">Book</span>[] {\n    <span class=\"hljs-keyword\">return</span> raws.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">raw</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Book</span>(\n      raw.<span class=\"hljs-property\">title</span>,\n      raw.<span class=\"hljs-property\">subtitle</span>,\n      raw.<span class=\"hljs-property\">isbn</span>,\n      raw.<span class=\"hljs-property\">description</span>,\n      raw.<span class=\"hljs-property\">rating</span>\n    ));\n  }\n}\n</code></pre>\n<h2 id=\"fazit\">Fazit</h2>\n<p>Mit dem neuen <code>HttpClient</code> lässt sich die Kommunikation mit HTTP-Schnittstellen stärker typisieren.\nDie Verwendung ist ansonsten weitestgehend gleich geblieben.\nLediglich die manuelle Umwandlung der Response von JSON mit <code>response.json()</code> entfällt ab sofort.\nDer <code>HttpClient</code> lässt sich allerdings so konfigurieren, dass weiterhin das gesamte Response-Objekt zurückgegeben wird.</p>\n<p>Für neue Funktionen sollten Sie sofort auf den <code>HttpClient</code> setzen.\nÄlteren Code können Sie schrittweise migrieren.</p>\n<p>Das alte <code>HttpModule</code> ist <em>deprecated</em> und wird wahrscheinlich mit dem Release von Angular 6 im Jahr 2018 entfernt.\nIn Angular 5 steht Ihnen das <code>HttpModule</code> zum Übergang noch zur Verfügung.</p>\n","meta":{"title":"Angular 4.3: Der neue HttpClient","author":"Gregor Woiwode","mail":"gregor.woiwode@gmail.com","published":"2017-11-05T00:00:00.000Z","keywords":["Angular","Angular 4","Angular 5","HttpClient","HTTP"],"language":"de","thumbnail":"https://website-articles.angular-buch.com/2017-11-httpclient/../x_shared/angular5.png"}}
